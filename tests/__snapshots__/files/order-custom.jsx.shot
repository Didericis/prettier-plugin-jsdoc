// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`File: order-custom.jsx 1`] = `
"/**
 * @property {string} language
 * @property {string} type
 * @property {string} content
 * @param {string} className
 * @param {string} language
 * @param {ClassAdderEnvironment} env
 * @example
 *   let foo = \\"foo\\"
 *
 * @see http://github.com/hosseinmd/prettier-plugin-jsdoc
 * @returns {undefined | string | string[]}
 */

/**
 * Returns an object which provides methods to get the ids of the components
 * which have to be loaded (\`getIds\`) and a way to efficiently load them in
 * synchronously and asynchronous contexts (\`load\`).
 *
 * The set of ids to be loaded is a superset of \`load\`. If some of these ids
 * are in \`loaded\`, the corresponding components will have to reloaded.
 *
 * The ids in \`load\` and \`loaded\` may be in any order and can contain
 * duplicates.
 *
 * @param {Components} components
 * @param {string[]} load
 * @param {string[]} [loaded=[]] A list of already loaded components.
 *
 *   If a component is in this list, then all of its requirements will also be
 *   assumed to be in the list. Default is \`[]\`
 * @returns {Loader}
 *
 * @typedef Loader
 * @property {() => string[]} getIds A function to get all ids of the
 *   components to load.
 *
 *   The returned ids will be duplicate-free, alias-free and in load order.
 * @property {LoadFunction} load A functional interface to load components.
 *
 * @typedef {<T>(
 *   loadComponent: (id: string) => T,
 *   chainer?: LoadChainer<T>,
 * ) => T} LoadFunction
 *   A functional interface to load components.
 *
 *   The \`loadComponent\` function will be called for every component in the
 *   order in which they have to be loaded.
 *
 *   The \`chainer\` is useful for asynchronous loading and its \`series\` and
 *   \`parallel\` functions can be thought of as \`Promise#then\` and
 *   \`Promise.all\`.
 * @example
 *   load(id => { loadComponent(id); }); // returns undefined
 *
 *   await load(
 *   id => loadComponentAsync(id), // returns a Promise for each id
 *   {
 *   series: async (before, after) => {
 *   await before;
 *   await after();
 *   },
 *   parallel: async (values) => {
 *   await Promise.all(values);
 *   }
 *   }
 *   );
 */

/**
 * Function example description that was wrapped by hand so it have more then
 * one line and don't end with a dot REPEATED TWO TIMES BECAUSE IT WAS EASIER to
 * copy function example description that was wrapped by hand so it have more
 * then one line.
 *
 * @async
 * @private
 * @memberof test
 * @param {String | Number} text - Some text description that is very long and
 *   needs to be wrapped
 * @param {String} [defaultValue=\\"defaultTest\\"] TODO. Default is \`\\"defaultTest\\"\`
 * @param {Number | Null} [optionalNumber]
 * @example
 *   var one = 5
 *   var two = 10
 *
 *   if(one > 2) { two += one }
 *
 * @undefiendTag\${\\" \\"}
 * @undefiendTag {number} name des
 * @returns {Boolean} Description for @returns with s
 */
const testFunction = (text, defaultValue, optionalNumber) => true;
"
`;
